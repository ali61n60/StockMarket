@using ServiceStd.IService
@inject ISymbolService _symbolService
@inject IJSRuntime JS
    <h3>Symbol Selector</h3>
    <div class="row">
        <div class="col-sm-3">
            <p>current count: @currentSymbolId1</p>
        </div>
        <div class="col-sm-6">
            <label>Symbol Id</label>
            <input @bind="newSybmolId1" placeholder="SymbolId" />
        </div>
        <div class="col-sm-3">
            <button class="btn btn-light btn-block" @onclick="GetSymbolData1">Chart1</button>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            <p>current count: @currentSymbolId2</p>
        </div>
        <div class="col-sm-6">
            <label>Symbol Id</label>
            <input @bind="newSybmolId2" placeholder="SymbolId" />
        </div>
        <div class="col-sm-3">
            <button class="btn btn-primary btn-block" @onclick="GetSymbolData2">Chart2</button>
        </div>
    </div>
    <br />
    <button class="btn btn-primary btn-block" @onclick="GetRatioData">Draw Ratio</button>

    @code {
        private int currentSymbolId1 = 1;
        private int currentSymbolId2 = 456;
        private int sybolIdCapture;
        private string newSybmolId1;
        private string newSybmolId2;
        [Parameter]
        public string ChartId1 { get; set; } = "chart1";
        [Parameter]
        public string ChartId2 { get; set; } = "chart2";
        [Parameter]
        public string ChartId3 { get; set; } = "chart3";

        private async Task GetSymbolData1()
        {
            draw(ChartNumber.Chart1);
        }

        private async Task GetSymbolData2()
        {
            draw(ChartNumber.Chart2);
        }

        private async Task draw(ChartNumber chartNumber)
        {
            switch (chartNumber)
            {
                case ChartNumber.Chart1:
                    {
                        if (int.TryParse(newSybmolId1, out sybolIdCapture))//an int as the input
                        {
                            currentSymbolId1 = sybolIdCapture;
                            //todo make a method of next 10 lines
                            List<PointData> chartData = _symbolService.GetSymbolTradeData(currentSymbolId1);
                            List<int> dateTimes = new List<int>();
                            List<double> finalPriceList = new List<double>();
                            int i = 1;
                            foreach (PointData p in chartData)
                            {
                                dateTimes.Add(i++);
                                finalPriceList.Add(p.Final);
                            }


                            await JS.InvokeAsync<Task>("DrawChart", dateTimes, finalPriceList, ChartId1);
                        }
                        else//not an int as input
                        {
                            newSybmolId1 = currentSymbolId1.ToString();
                        }
                        break;
                    }
                case ChartNumber.Chart2:
                    {
                        if (int.TryParse(newSybmolId2, out sybolIdCapture))//an int as the input
                        {
                            currentSymbolId2 = sybolIdCapture;
                            //todo make a method of next 10 lines
                            List<PointData> chartData = _symbolService.GetSymbolTradeData(currentSymbolId2);
                            List<int> dateTimes = new List<int>();
                            List<double> finalPriceList = new List<double>();
                            int i = 1;
                            foreach (PointData p in chartData)
                            {
                                dateTimes.Add(i++);
                                finalPriceList.Add(p.Final);
                            }

                            await JS.InvokeAsync<Task>("DrawChart", dateTimes, finalPriceList, ChartId2);
                        }
                        else//not an int as input
                        {
                            newSybmolId1 = currentSymbolId1.ToString();
                        }
                        break;
                    }
            }
        }

        private async Task GetRatioData()
        {
            List<PointData> chartData = _symbolService.GetRatio(currentSymbolId1, currentSymbolId2);
            List<int> dateTimes = new List<int>();
            List<double> finalPriceList = new List<double>();
            int i = 1;
            foreach (PointData p in chartData)
            {
                dateTimes.Add(i++);
                finalPriceList.Add(p.Final);
            }

            await JS.InvokeAsync<Task>("DrawChart", dateTimes, finalPriceList, ChartId3);
        }

        public enum ChartNumber
        {
            Chart1,
            Chart2
        }
    }
